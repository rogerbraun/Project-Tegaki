#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (C) 2008-2009 The Tegaki project contributors
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# Contributors to this file:
# - Mathieu Blondel

import sys
import os
import shutil
from optparse import OptionParser

from tegaki.character import *
from lib.exceptions import *
from lib.utils import *

currdir = os.path.dirname(os.path.abspath(__file__))

def my_import(name):
    """
    Similar to __import__() except that x.y.z returns z instead of x.
    """
    mod = __import__(name)
    components = name.split('.')
    for comp in components[1:]:
        mod = getattr(mod, comp)
    return mod

def load_model_module(model):
    if os.path.isdir(model):
        model_init = os.path.join(model, "__init__.py")
      
        if os.path.exists(model_init):
            module = model.replace("/", ".")

            return my_import(module)

    return None

def load_model_modules(path="models"):
    dic = {}
  
    for name in os.listdir(path):
        model = os.path.join(path, name)

        module = load_model_module(model)

        if module:
            dic[name] = module
        
    return dic

def get_model_list(path="models"):
    return [name for name in os.listdir(path) \
            if os.path.isdir(os.path.join(path, name))]

def stderr_print(*args):
    sys.stderr.write("".join([str(arg) for arg in args]) + "\n")

def die(msg, code=0):
  stderr_print(msg)
  sys.exit(code)

def run_model(name, command, options):
    # Support for naming a model by its folder path
    if name.startswith("models/"):
        if name.endswith("/"):
            name = name[:-1]
        name = name.split("/")[1]

    model_folder = os.path.join("models", name)

    module = load_model_module(model_folder)

    if not module:
        die("Model %s doesn't exist.\n" % name + \
            "Use the list command for a list of models.")

    try:
        model = module.model.Model(options)

        if command == "all":
            commands = model.ALL
        elif "--" in command:
            # Range of commands
            commands = command.split("--")
            if len(commands) != 2:
                raise ModelException, "Not a range"
            try:
                cmd1 = model.ALL.index(commands[0])
                cmd2 = model.ALL.index(commands[1])
            except ValueError:
                raise ModelException, "Wrong command"

            if cmd1 > cmd2:
                raise ModelException, "Not a range"

            commands = model.ALL[cmd1:cmd2+1]
        else:
            # Single command
            commands = [command]

        for command in commands:
            stderr_print("Running '%s'..." % command)
            try:
                cmd = getattr(model, command)
            except AttributeError:
                raise ModelException, "'%s' is not implemented in '%s'." % \
                                      (command, name)
            else:
                cmd()
                stderr_print("Done.")

    except ModelException, e:
        stderr_print("Error!")
        stderr_print(e.message)
  
def usage():
    die("""Usage:
    
-----  

For model related commands:
  
./mmanager model-name command-name

For a list of possible commands, type:
./mmanage model-name commands

-----

For general commands:

./mmanager command-name

Possible commands: list, cleanall, pad, help

-----

Options:
    -v  --verbose
    -s  --stdin
    
""")

parser = OptionParser()

parser.add_option("-v", "--verbosity-level",
                  type="int", dest="verbose", default=0,
                  help="verbosity level (0: quiet)")

parser.add_option("-s", "--stdin",
                  action="store_true", dest="stdin", default=False,
                  help="read character xml from stdin")
parser.add_option("-j", "--json",
                  action="store_true", dest="json", default=False,
                  help="output to json instead of xml")

(options, args) = parser.parse_args()

if not len(args) in [1, 2]:
    usage()
    
if len(args) == 1:
    # Commands that don't need a model

    command = args[0]
    
    if command == "list":
        print "Available models:"
        for name in get_model_list():
            print "- %s" % name
            
    elif command == "cleanall":
        stderr_print("Clean all...")
        for name in get_model_list():
            model_folder = os.path.join("models", name)
            module = load_model_module(model_folder)
            
            if not module:
                continue

            model = module.model.Model(options)
            model.clean()
        stderr_print("Done.")

    elif command == "pad":
        from lib.writing_pad import WritingPad

        def output_writing(writing):
            if options.json:
                print writing_to_json(writing)
            else:
                print writing_to_xml(writing)
            sys.stdout.flush()

        pad = WritingPad(output_writing)

        if options.stdin and not options.json:
            xml = sys.stdin.read()
            initial_writing = xml_to_writing(xml)
            pad.canvas_set_writing(initial_writing)

        pad.run()
    
    elif command == "allall":
        for name in get_model_list():
            stderr_print("Model '%s'." % name)
            run_model(name, "all", options)
        stderr_print("Done all.")
    else:
        usage()
        
else:
    # Commands that need a model
    command = args[1]
    name = args[0]

    run_model(name, command, options)
  